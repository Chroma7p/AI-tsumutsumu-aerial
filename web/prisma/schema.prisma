datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = env("GENERATOR_PROVIDER")
  recursive_type_depth = 5
}

model Guild {
  id        String      @id @unique
  name      String
  info      String?
  channels  Channel[]
  userGuild UserGuild[] 
  emojis    Emoji[]
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id      String  @id
  name    String
  info    String?
  guildId String @map("guild_id")
  guild   Guild   @relation(fields: [guildId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String      @id @unique
  name      String
  info      String?
  userGuild UserGuild[]
  roleUser  RoleUser[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGuild {
  userId  String @map("user_id")
  guildId String @map("guild_id")
  user    User   @relation(fields: [userId], references: [id])
  guild   Guild  @relation(fields: [guildId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, guildId]) 
}

//GuildとEmojiは一対多の関係
model Emoji {
  id      String  @id
  name    String
  info    String?
  guildId String @map("guild_id")
  guild   Guild   @relation(fields: [guildId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// GuildとRoleは一対多の関係
//　RoleとUserは多対多の関係
model Role {
  id      String  @id
  name    String
  guildId String @map("guild_id")
  guild   Guild   @relation(fields: [guildId], references: [id])
  roleUser RoleUser[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoleUser{
  roleId String @map("role_id")
  userId String @map("user_id")
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([roleId, userId])
}